plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'org.sonarqube' version '2.8'
	id 'jacoco'
}

group = 'com.sophos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compile group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-springboot2', version: '1.5'
	compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.11.815'
	compile group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: '1.11.815'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

task buildZip(type: Zip) {
	from compileJava
	from processResources
	into('lib') {
		from configurations.runtimeClasspath
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "rjrb_DemoServerless-SpringBoot"
		property "sonar.organization", "rjrb"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.login", "d03c135964aa388462ba06e9dffcca68baf25d6f"
	}
}

// JaCoCo
jacocoTestReport {
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(
				dir: it,
				exclude: [
					'com/sophos/demoserverless/DemoServerlessApplication.class',
					'com/sophos/demoserverless/LambdaHandler.class'
				]
			)
		}))
	}
}
jacoco {
	reportsDir = file("$buildDir/jacoco")
}
